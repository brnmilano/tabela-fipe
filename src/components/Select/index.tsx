import ReactSelect, {
  ActionMeta,
  GroupBase,
  OptionsOrGroups,
} from "react-select";
import { Path, Controller, Control, FieldErrors } from "react-hook-form";
import { customNoOptionMessage } from "@/constants/messages";
import React from "react";
import styles from "./styles.module.scss";

interface SelectInterface {
  /**
   * Property used to identify the input, it is also used in the "name" attribute.
   */
  registerField?: Path<any>;
  /**
   * Receives a <Control> object from the React Hook Form library to define the context of this form.
   */
  control?: Control<any>;
  /**
   * Error array generated by the React Hook Form library.
   * It is used to render the input error, if there is any.
   */
  errors?: FieldErrors<any>;
  /**
   * Options for the select input.
   */
  options: OptionsOrGroups<any, GroupBase<any>> | undefined;
  /**
   * Determines if the select input allows clearing the selected value.
   */
  isClearable?: boolean;
  /**
   * Disables the select input if set to true.
   */
  disabled?: boolean;
  /**
   * Label for the select input.
   */
  label?: string;
  /**
   * Placeholder text displayed when no option is selected.
   */
  placeholder?: string;
  /**
   * Current value of the select input.
   */
  value?: any;
  /**
   * Boolean indicating whether the select input is selected.
   */
  isSelected?: boolean;
  /**
   * Callback function that is fired when the select input value changes.
   * @param newValue - The new value of the select input.
   * @param actionMeta - An object containing additional information about the change event.
   */
  onChange?: ((newValue: any, actionMeta: ActionMeta<any>) => void) | undefined;
}

export const DisplayErrorMessage = (data: any) => {
  return <p>{data?.message || ""}</p>;
};

export default function Select(props: SelectInterface) {
  const {
    errors,
    label,
    placeholder,
    registerField,
    control,
    options,
    isClearable = false,
    disabled = false,
    onChange,
    value,
  } = props;

  const style = {
    control: (provided: any, state: any) => ({
      ...provided,
      backgroundColor: disabled ? "var(--disabled-input)" : "var(--white)",
      border: state.isFocused
        ? "1px solid transparent"
        : disabled
        ? "1px solid var(--gray-500)"
        : "1px solid var(--gray-500)",
      borderRadius: "8px",
      // fontSize: state.isSelected ? "1.8rem" : isMobile ? "1.2rem" : "1.6rem",
      boxShadow: state.isFocused ? "0 0 0 1px var(--black-light)" : 0,
      "&:hover": {
        border: "1px solid var(--gray-800)",
      },
      color: "var(--black)",
      // height: isMobile ? "38px" : "45px"
    }),

    dropdownIndicator: (provided: any) => ({
      ...provided,
      color: disabled ? "var(--gray-400)" : "var(--text)",
    }),
    singleValue: (provided: any) => ({
      ...provided,
      color: disabled ? "var(--gray-700)" : "var(--gray-900)",
    }),
    option: (provided: any) => ({
      ...provided,
      cursor: "pointer",
      fontSize: "1.rem",
    }),
    menuList: (provided: any) => ({
      ...provided,
      paddingTop: 0,
      paddingBottom: 0,
      borderRadius: 5,
      minWidth: "100%",
    }),
    placeholder: (provided: any) => ({
      ...provided,
      color: "var(--gray-400)",
    }),
    valueContainer: (provided: any) => ({
      ...provided,
      paddingLeft: "10px",
    }),
    indicatorContainer: (provided: any) => ({
      ...provided,
      padding: "2px",
    }),
  };

  const errorStyle = {
    control: (provided: any, state: any) => ({
      ...provided,
      backgroundColor: "var(--white)",
      border: "solid 1px var(--red)",
      borderRadius: "8px",
      fontSize: "12px",
      boxShadow: state.isFocused ? "0 0 0 1px var(--black-light)" : 0,

      "&:hover": {
        border: "1px solid var(--red)",
      },
    }),
    valueContainer: (provided: any) => ({
      ...provided,
      paddingLeft: "10px",
    }),
  };

  return (
    <div className={styles.container} style={{ width: "100%" }}>
      {label && <label htmlFor={registerField}>{label}</label>}
      
      {control ? (
        <Controller
          control={control}
          name={registerField || ""}
          render={({ field }) => {
            return (
              <div className={styles.inputWrapper}>
                <ReactSelect
                  {...field}
                  className={styles.input}
                  styles={errors?.[registerField || ""] ? errorStyle : style}
                  isDisabled={disabled}
                  isClearable={isClearable}
                  options={options}
                  placeholder={placeholder}
                  noOptionsMessage={customNoOptionMessage}
                />
              </div>
            );
          }}
        />
      ) : (
        <div className={styles.inputWrapper}>
          <ReactSelect
            noOptionsMessage={() => "Lista vazia"}
            value={value}
            className={styles.input}
            styles={errors?.[registerField || ""] ? errorStyle : style}
            isDisabled={disabled}
            isClearable={isClearable}
            options={options}
            placeholder={placeholder}
            onChange={onChange}
          />
        </div>
      )}

      <div
        className={`${styles.errorMessage} ${
          errors?.[registerField || ""] && styles.showingErrorMessage
        }`}
      >
        {DisplayErrorMessage(errors?.[registerField || ""])}
      </div>
    </div>
  );
}
